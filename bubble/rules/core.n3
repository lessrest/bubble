@prefix : <#> .
@prefix ai: <https://node.town/2024/ai/#> .
@prefix eye: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix nt: <https://node.town/2024/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix swa: <https://swa.sh/> .

# Define inverse relationships
nt:owns owl:inverseOf nt:isOwnedBy .
nt:succeeds owl:inverseOf nt:precedes .
nt:isPartOf owl:inverseOf nt:hasPart .
owl:inverseOf owl:inverseOf owl:inverseOf .

# Rule: Apply inverse relationships
{
   ?p owl:inverseOf ?q .
   ?a ?p ?b 
}
=> 
{
   ?b ?q ?a 
} .

# Rule: Apply suppositions
{
   nt:nonce nt:ranks ?rank .
   ?step nt:ranks ?rank .
   ?step nt:supposes ?g 
}
=> ?g .

# Rule: Calculate next state from current state
# next = current + decisions - revocations
{
   ?s1 a nt:Step .
   ?s2 nt:succeeds ?s1 .
   [] eye:findall (
       ?g1
       {
           ?s1 nt:supposes ?g1 
       }
       ?gs1
   ) ;
       eye:findall (
           ?g2
           {
               ?s1 nt:decides ?g2 
           }
           ?gs2
       ) ;
       eye:findall (
           ?g3
           {
               ?s1 nt:revokes ?g3 
           }
           ?gs3
       ) .
   ?gs1 log:conjunction ?g1m .
   ?gs2 log:conjunction ?g2m .
   ?gs3 log:conjunction ?g3m .
   ( ?g1m ?g3m ) eye:graphDifference ?tmp .
   ( ?tmp ?g2m ) log:conjunction ?result .
}
=> 
{
   ?s2 nt:supposes ?result 
} .

# Rule: Increment nonce
{
   nt:nonce nt:ranks ?rank .
   ?step nt:ranks ?rank .
   ?next nt:succeeds ?step .
   ( ?rank 1 ) math:sum ?incr 
}
=> 
{
   ?step nt:decides 
   {
       nt:nonce nt:ranks ?incr .
       ?next nt:ranks ?incr .
   } .
   ?step nt:revokes 
   {
       nt:nonce nt:ranks ?rank 
   } .
} .
nt:WebService a owl:Class ;
   rdfs:label "web service"@en .
nt:WebServiceInterface a owl:Class ;
   rdfs:label "web service interface"@en ;
   rdfs:comment "A web service interface defines how to interact with a web service."@en .

#
ai:GenerativeModel a owl:Class ;
   rdfs:label "generative model"@en .
ai:ImageModel a owl:Class ;
   rdfs:label "image model"@en ;
   rdfs:subClassOf ai:GenerativeModel .
ai:GenerationSpecification a owl:Class ;
   rdfs:label "generation specification"@en ;
   rdfs:comment "A generation specification is a description of the desired output of a generative model."@en .
ai:GenerationProcess a owl:Class ;
   rdfs:label "generation process"@en ;
   rdfs:comment "A generation process is the execution of a generative model."@en .

#
ai:RecraftV3 a ai:ImageModel ;
   rdfs:label "Recraft V3"@en ;
   ai:hasReplicateID "recraft-ai/recraft-v3" .

#
ai:ReplicateWebService a nt:WebService ;
   rdfs:label "Replicate.com"@en .

#
{
   ?model a ai:ImageModel ;
       ai:hasReplicateID ?id .
   ?bearer a nt:BearerToken ;
       nt:hasValue ?token ;
       nt:forService ai:ReplicateWebService .
   ?img a nt:Image ;
       nt:hasSize ?size ;
       nt:hasStyle ?style ;
       nt:hasContent ?content ;
       nt:generatedBy ?model .
   ( "https://api.replicate.com/v1/models/%s/predictions" ?id ) string:format ?url .
   ( "Token %s" ?token ) string:format ?auth .
}
=> 
{
   ?request a nt:POSTRequest ;
       nt:hasURL ?url ;
       nt:hasAuthorizationHeader ?auth ;
       nt:posts [
           a nt:JSONObject ;
           nt:hasProperty [
               a nt:Property ;
               nt:key "input" ;
               nt:value [
                   a nt:JSONObject ;
                   nt:hasProperty [
                       a nt:Property ;
                       nt:key "prompt" ;
                       nt:value ?content 
                   ] ;
                   nt:hasProperty [
                       a nt:Property ;
                       nt:key "size" ;
                       nt:value ?size 
                   ] ;
                   nt:hasProperty [
                       a nt:Property ;
                       nt:key "style" ;
                       nt:value ?style 
                   ] 
               ] 
           ] 
       ] .
} .
