@prefix ai: <https://node.town/2024/ai/#> .
@prefix json: <https://node.town/2024/json/#> .
@prefix nt: <https://node.town/2024/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix recraft: <https://node.town/2024/ai/recraft/#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@base <https://swa.sh/2024/api/> .


#
{
   ?style a ai:RecraftV3Style 
}
=> 
{
   ai:RecraftV3 ai:hasStyle ?style 
} .

#
ai:RecraftV3 a ai:ImageModel ;
   rdfs:label "Recraft V3"@en ;
   ai:hasReplicateID "recraft-ai/recraft-v3" .
recraft:NaturalLightStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Natural Light"@en ;
   nt:id "realistic_image/natural_light" .
recraft:HardFlashStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Hard Flash"@en ;
   nt:id "realistic_image/hard_flash" .
recraft:StudioPortraitStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Studio Portrait"@en ;
   nt:id "realistic_image/studio_portrait" .
recraft:BlackAndWhiteStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Black and White"@en ;
   nt:id "realistic_image/b_and_w" .
recraft:HDRStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / HDR"@en ;
   nt:id "realistic_image/hdr" .
recraft:EnterpriseStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Enterprise"@en ;
   nt:id "realistic_image/enterprise" .
recraft:MotionBlurStyle a recraft:RecraftV3Style ;
   rdfs:label "Realistic Image / Motion Blur"@en ;
   nt:id "realistic_image/motion_blur" .
recraft:PixelArtStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Pixel Art"@en ;
   nt:id "digital_illustration/pixel_art" .
recraft:HandDrawnStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Hand Drawn"@en ;
   nt:id "digital_illustration/hand_drawn" .
recraft:GrainStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Grain"@en ;
   nt:id "digital_illustration/grain" .
recraft:InfantileSketchStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Infantile Sketch"@en ;
   nt:id "digital_illustration/infantile_sketch" .
recraft:ArtPosterStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / 2D Art Poster"@en ;
   nt:id "digital_illustration/2d_art_poster" .
recraft:Handmade3DStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Handmade 3D"@en ;
   nt:id "digital_illustration/handmade_3d" .
recraft:HandDrawnOutlineStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Hand Drawn Outline"@en ;
   nt:id "digital_illustration/hand_drawn_outline" .
recraft:EngravingColorStyle a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / Engraving Color"@en ;
   nt:id "digital_illustration/engraving_color" .
recraft:ArtPoster2Style a recraft:RecraftV3Style ;
   rdfs:label "Digital Illustration / 2D Art Poster 2"@en ;
   nt:id "digital_illustration/2d_art_poster_2" .


#
ai:ReplicateWebService a nt:WebService ;
   rdfs:label "Replicate.com"@en .


#
{
   ?account a nt:ServiceAccount ;
       nt:forService ?service ;
       nt:hasPart ?token .
   ?token a nt:BearerToken 
}
=> 
{
   ?token nt:authorizes ?service 
} .

# #
{
   ( "https://api.replicate.com/v1/models/%s/predictions" ?id ) string:format ?url .
   ( "Token %s" ?secret ) string:format ?auth .
   ?token nt:authorizes ai:ReplicateWebService ;
       nt:hasValue ?secret .
   ?model ai:hasReplicateID ?id .
   ?img a nt:ImageSpecification ;
       nt:specifies [
           nt:width ?width 
       ] , [
           nt:height ?height 
       ] , [
           a recraft:RecraftV3Style ;
           nt:id ?style 
       ] , [
           ai:prompt ?text 
       ] .
   ( "%sx%s" ?width ?height ) string:format ?size .
}
=> 
{
   ?request a nt:POSTRequest ;
       nt:hasURL ?url ;
       nt:hasAuthorizationHeader ?auth ;
       nt:posts [
           a json:Object ;
           json:has [
               json:key "input" ;
               json:val [
                   a json:Object ;
                   json:has [
                       json:key "prompt" ;
                       json:val ?text 
                   ] , [
                       json:key "size" ;
                       json:val ?size 
                   ] , [
                       json:key "style" ;
                       json:val ?style 
                   ] 
               ] 
           ] 
       ] 
} .

# If we have an S3 credential, we can use rclone.
{
   ?credential a nt:S3Credential ;
       nt:hasClientID ?clientID ;
       nt:hasClientSecret ?clientSecret ;
       nt:hasEndpoint ?endpoint 
}
=> 
{
   [] a nt:RcloneConfiguration ;
       nt:has [
           nt:environmentVariable "RCLONE_S3_ACCESS_KEY_ID" ;
           nt:value ?clientID 
       ] , [
           nt:environmentVariable "RCLONE_S3_SECRET_ACCESS_KEY" ;
           nt:value ?clientSecret 
       ] , [
           nt:environmentVariable "RCLONE_S3_ENDPOINT" ;
           nt:value ?endpoint 
       ] , [
           nt:environmentVariable "RCLONE_S3_ENV_AUTH" ;
           nt:value "true" 
       ] 
} .

# If we have a POST request, we invoke the POST capability.
#
# Actually, we should check for a POST request in an outbox,
# and remove it from the outbox after invoking the capability.
{
   ?request a nt:POSTRequest ;
       nt:hasURL ?url ;
       nt:posts ?body .
   ?post a nt:POSTCapability .
   ?surface nt:head ?step .
}
=> 
{
   ?step nt:invokes [
       a nt:Invocation ;
       nt:invokes ?post ;
       nt:provides ?request 
   ] 
} .
