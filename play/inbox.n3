@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix eye: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix nt: <https://node.town/2024/> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix swa: <https://swa.sh/> .
@base <https://swa.sh/2024/11/22/step/1> .


# A formula can be supposed during a step.
# If the current step supposes a formula, that formula is true in the default graph.
{
   <#> swa:supposes ?g 
}
=> ?g .

# The current step has a successor step.
_:next a swa:Step ;
   swa:succeeds <#> .

# Succeeds is inverse of precedes.
{
   ?s1 swa:succeeds ?s2 
}
=> 
{
   ?s2 swa:precedes ?s1 
} .

# The successor step has a rank that is one greater than the rank of the current step.
{
   swa:nonce swa:ranks ?rank .
   ( ?rank 1 ) math:sum ?next 
}
=> 
{
   <#> swa:decides 
   {
       swa:nonce swa:ranks ?next 
   } .
   <#> swa:revokes 
   {
       swa:nonce swa:ranks ?rank 
   } .
} .

# next = current + decisions - revocations
{
   ?s1 a swa:Step .
   ?s2 swa:succeeds ?s1 .
   [] eye:findall (
       ?g1
       {
           ?s1 swa:supposes ?g1 
       }
       ?gs1
   ) ;
       eye:findall (
           ?g2
           {
               ?s1 swa:decides ?g2 
           }
           ?gs2
       ) ;
       eye:findall (
           ?g3
           {
               ?s1 swa:revokes ?g3 
           }
           ?gs3
       ) .
   ?gs1 log:conjunction ?g1m .
   ?gs2 log:conjunction ?g2m .
   ?gs3 log:conjunction ?g3m .
   ( ?g1m ?g3m ) eye:graphDifference ?tmp .
   ( ?tmp ?g2m ) log:conjunction ?result .
}
=> 
{
   ?s2 swa:supposes ?result 
} .

# For example:
# The current step
<#> a swa:Step ;
   swa:supposes 
   {
       swa:nonce swa:ranks 1 .
       <https://apple.com/iphone> a nt:Product 
   }
   ;
   swa:decides 
   {
       <https://apple.com/macbook> a nt:Product .
   }
   ;
   swa:revokes 
   {
       <https://apple.com/iphone> a nt:Product .
   } .

# Given that...
{
   # 1. there is a link,
   ?link a as:Link .
   # 2. the link has a URL,
   ?link as:url ?url .
   # 3. there is a shell capability, and
   ?shell a nt:ShellCapability .
   # 4. we can imagine the curl command,
   ( "curl -L %s -o $out" ?url ) string:format ?command 
}
=> 
{
   # then the current step invokes the capability with the command.
   <#> swa:invokes [
       a nt:Invocation ;
       nt:target ?shell ;
       nt:parameter ?command 
   ] .
} .

# Example of a shell capability and a link.
<#> swa:supposes 
{
   [
       a nt:ShellCapability ;
       nt:hostname "swa.sh" 
   ] .
   [
       a as:Link ;
       as:url "https://news.ycombinator.com/" 
   ] .
   [
       a as:Link ;
       as:url "https://www.bbc.com/" 
   ] .
} .
